<?php

/**
 * cafe store api
 * PHP version 7.4
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * this is a sample.
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

declare(strict_types=1);

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer\App;

use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Slim\Exception\HttpNotImplementedException;

/**
 * RegisterRoutes Class Doc Comment
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
class RegisterRoutes
{
    /** @var array[] list of all api operations */
    private $operations = [
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '',
            'path' => '/menu',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMenuApi',
            'userClassname' => 'MenuApi',
            'operationId' => 'addMenu',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "menu response",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/addMenu_201_response"
      },
      "examples" : {
        "example coffee" : {
          "value" : {
            "id" : 1,
            "name" : "coffee",
            "price" : 350,
            "status" : "available"
          }
        }
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad Request"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/menu',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMenuApi',
            'userClassname' => 'MenuApi',
            'operationId' => 'getMenu',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK",
  "content" : {
    "application/json" : {
      "schema" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/getMenu_200_response_inner"
        },
        "x-examples" : {
          "example-1" : [ {
            "id" : 1,
            "name" : "coffee",
            "price" : 350,
            "status" : "available"
          }, {
            "id" : 2,
            "name" : "latte",
            "price" : 400,
            "status" : "sold out"
          } ]
        }
      },
      "examples" : {
        "list menu example" : {
          "value" : [ {
            "id" : 1,
            "name" : "coffee",
            "price" : 350,
            "status" : "available"
          }, {
            "id" : 2,
            "name" : "latte",
            "price" : 400,
            "status" : "sold out"
          } ]
        }
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad Request"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '',
            'path' => '/menu/{menuID}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMenuApi',
            'userClassname' => 'MenuApi',
            'operationId' => 'deleteMenu',
            'responses' => [
                '204' => [
                    'jsonSchema' => '{
  "description" : "No Content"
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad Request"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/menu/{menuID}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMenuApi',
            'userClassname' => 'MenuApi',
            'operationId' => 'showMenu',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "menu response",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/addMenu_201_response"
      },
      "examples" : {
        "example coffee" : {
          "value" : {
            "id" : 1,
            "name" : "coffee",
            "price" : 350,
            "status" : "available"
          }
        }
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad Request"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '',
            'path' => '/menu/{menuID}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMenuApi',
            'userClassname' => 'MenuApi',
            'operationId' => 'updateMenu',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "menu response",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/addMenu_201_response"
      },
      "examples" : {
        "example coffee" : {
          "value" : {
            "id" : 1,
            "name" : "coffee",
            "price" : 350,
            "status" : "available"
          }
        }
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad Request"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '',
            'path' => '/order',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractOrderApi',
            'userClassname' => 'OrderApi',
            'operationId' => 'addOrder',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "Example response",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/addOrder_201_response"
      },
      "examples" : {
        "order res example" : {
          "value" : {
            "id" : 101,
            "menuId" : 1,
            "quantity" : 2,
            "shipDate" : "2022-07-02T17:04:19.719Z"
          }
        }
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad Request"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/order',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractOrderApi',
            'userClassname' => 'OrderApi',
            'operationId' => 'listOrder',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK",
  "content" : {
    "application/json" : {
      "schema" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/listOrder_200_response_inner"
        },
        "x-examples" : {
          "example-1" : [ {
            "id" : 101,
            "menuId" : 1,
            "quantity" : 2,
            "shipDate" : "2022-07-01T09:24:39.449Z"
          }, {
            "id" : 101,
            "menuId" : 1,
            "quantity" : 1,
            "shipDate" : "2022-07-02T17:04:19.719Z"
          } ]
        }
      },
      "examples" : {
        "list order example" : {
          "value" : [ {
            "id" : 101,
            "menuId" : 1,
            "quantity" : 2,
            "shipDate" : "2022-07-01T09:24:39.449Z"
          }, {
            "id" : 101,
            "menuId" : 1,
            "quantity" : 1,
            "shipDate" : "2022-07-02T17:04:19.719Z"
          } ]
        }
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad Request"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '',
            'path' => '/order/{orderID}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractOrderApi',
            'userClassname' => 'OrderApi',
            'operationId' => 'deleteOrder',
            'responses' => [
                '204' => [
                    'jsonSchema' => '{
  "description" : "No Content"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/order/{orderID}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractOrderApi',
            'userClassname' => 'OrderApi',
            'operationId' => 'showOrder',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Example response",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/addOrder_201_response"
      },
      "examples" : {
        "order res example" : {
          "value" : {
            "id" : 101,
            "menuId" : 1,
            "quantity" : 2,
            "shipDate" : "2022-07-02T17:04:19.719Z"
          }
        }
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad Request"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '',
            'path' => '/order/{orderID}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractOrderApi',
            'userClassname' => 'OrderApi',
            'operationId' => 'updateOrder',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Example response",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/addOrder_201_response"
      },
      "examples" : {
        "order res example" : {
          "value" : {
            "id" : 101,
            "menuId" : 1,
            "quantity" : 2,
            "shipDate" : "2022-07-02T17:04:19.719Z"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
    ];

    /**
     * Add routes to Slim app.
     *
     * @param \Slim\App $app Pre-configured Slim application instance
     *
     * @throws HttpNotImplementedException When implementation class doesn't exists
     */
    public function __invoke(\Slim\App $app): void
    {
        $app->options('/{routes:.*}', function (ServerRequestInterface $request, ResponseInterface $response) {
            // CORS Pre-Flight OPTIONS Request Handler
            return $response;
        });

        // create mock middleware factory
        /** @var \Psr\Container\ContainerInterface */
        $container = $app->getContainer();
        /** @var \OpenAPIServer\Mock\OpenApiDataMockerRouteMiddlewareFactory|null */
        $mockMiddlewareFactory = null;
        if ($container->has(\OpenAPIServer\Mock\OpenApiDataMockerRouteMiddlewareFactory::class)) {
            // I know, anti-pattern. Don't retrieve dependency directly from container
            $mockMiddlewareFactory = $container->get(\OpenAPIServer\Mock\OpenApiDataMockerRouteMiddlewareFactory::class);
        }

        foreach ($this->operations as $operation) {
            $callback = function (ServerRequestInterface $request) use ($operation) {
                $message = "How about extending {$operation['classname']} by {$operation['apiPackage']}\\{$operation['userClassname']} class implementing {$operation['operationId']} as a {$operation['httpMethod']} method?";
                throw new HttpNotImplementedException($request, $message);
            };
            $middlewares = [];

            if (class_exists("\\{$operation['apiPackage']}\\{$operation['userClassname']}")) {
                // Notice how we register the controller using the class name?
                // PHP-DI will instantiate the class for us only when it's actually necessary
                $callback = ["\\{$operation['apiPackage']}\\{$operation['userClassname']}", $operation['operationId']];
            }

            if ($mockMiddlewareFactory) {
                $mockSchemaResponses = array_map(function ($item) {
                    return json_decode($item['jsonSchema'], true);
                }, $operation['responses']);
                $middlewares[] = $mockMiddlewareFactory->create($mockSchemaResponses);
            }

            $route = $app->map(
                [$operation['httpMethod']],
                "{$operation['basePathWithoutHost']}{$operation['path']}",
                $callback
            )->setName($operation['operationId']);

            foreach ($middlewares as $middleware) {
                $route->add($middleware);
            }
        }
    }
}
